
IR_Bril_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f7c  08002f7c  00003f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f8c  08002f8c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f8c  08002f8c  00003f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f94  08002f94  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00003f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f98  08002f98  00003f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  08002fa8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08002fa8  000045d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ff3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  0000d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b2c  00000000  00000000  0000f842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4dd  00000000  00000000  0002536e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b60e  00000000  00000000  0002f84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bae59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000bae9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bd6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f64 	.word	0x08002f64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002f64 	.word	0x08002f64

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <IR_Timeout>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void IR_Timeout(struct Receiver *Rec) {	// increments IR Receivers timeout counter and checks if timeout has reached threshold
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (Rec->timeout_counter > TIMEOUT_THRESHOLD) {// checks if counter of timeout has reached threshold
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80004d6:	2b64      	cmp	r3, #100	@ 0x64
 80004d8:	d903      	bls.n	80004e2 <IR_Timeout+0x1a>
		Rec->data = 0;					// resets data of receiver
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
	} else {
		Rec->timeout_counter++;		// increments counter of timeout
	}
}
 80004e0:	e007      	b.n	80004f2 <IR_Timeout+0x2a>
		Rec->timeout_counter++;		// increments counter of timeout
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
//	TIM3->CCR3 = (Receiver4.data >> 1) * 40;// !WIP! updates dutycycle of PDLC PWM from received data (only receiver4 for now)

	IR_Timeout(&Receiver1);	// handles calcs and compares for IR timeout of receiver
 8000508:	482d      	ldr	r0, [pc, #180]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800050a:	f7ff ffdd 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver2);
 800050e:	482d      	ldr	r0, [pc, #180]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000510:	f7ff ffda 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver3);
 8000514:	482c      	ldr	r0, [pc, #176]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000516:	f7ff ffd7 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver4);
 800051a:	482c      	ldr	r0, [pc, #176]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800051c:	f7ff ffd4 	bl	80004c8 <IR_Timeout>

	uint8_t PDLC_candidate = Receiver1.data >> 1;	// writes data to PDLC_Candidate
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	085b      	lsrs	r3, r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	73fb      	strb	r3, [r7, #15]
	if(Receiver2.data > PDLC_candidate) {
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	b29b      	uxth	r3, r3
 8000532:	429a      	cmp	r2, r3
 8000534:	d904      	bls.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x40>
		PDLC_candidate = Receiver2.data >> 1;
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	085b      	lsrs	r3, r3, #1
 800053c:	b29b      	uxth	r3, r3
 800053e:	73fb      	strb	r3, [r7, #15]
	}
	if(Receiver3.data > PDLC_candidate) {
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000542:	881a      	ldrh	r2, [r3, #0]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	b29b      	uxth	r3, r3
 8000548:	429a      	cmp	r2, r3
 800054a:	d904      	bls.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x56>
		PDLC_candidate = Receiver3.data >> 1;
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b29b      	uxth	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
	}
	if(Receiver4.data > PDLC_candidate) {
 8000556:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	b29b      	uxth	r3, r3
 800055e:	429a      	cmp	r2, r3
 8000560:	d904      	bls.n	800056c <HAL_TIM_PeriodElapsedCallback+0x6c>
		PDLC_candidate = Receiver4.data >> 1;
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	b29b      	uxth	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]
	}

	PDLC_setpoint = PDLC_candidate * 40;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	b29b      	uxth	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800057c:	801a      	strh	r2, [r3, #0]

	if (PDLC_realpoint < PDLC_setpoint){
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d206      	bcs.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x98>
		PDLC_realpoint+= FADEIN_SPEED;
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	3380      	adds	r3, #128	@ 0x80
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000594:	801a      	strh	r2, [r3, #0]
 8000596:	e00b      	b.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0xb0>
	} else if (PDLC_realpoint > PDLC_setpoint){
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800059a:	881a      	ldrh	r2, [r3, #0]
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d905      	bls.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		PDLC_realpoint-= FADEIN_SPEED;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	3b80      	subs	r3, #128	@ 0x80
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005ae:	801a      	strh	r2, [r3, #0]
	}
	TIM3->CCR3 = PDLC_realpoint;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005b6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000014c 	.word	0x2000014c
 80005c4:	2000026c 	.word	0x2000026c
 80005c8:	2000038c 	.word	0x2000038c
 80005cc:	200004ac 	.word	0x200004ac
 80005d0:	20000148 	.word	0x20000148
 80005d4:	2000014a 	.word	0x2000014a
 80005d8:	40000400 	.word	0x40000400

080005dc <IR_Receive_Handler>:

void IR_Receive_Handler(struct Receiver *Rec) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int elapsed = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	if (Rec->first_interrupt == 1) {	// only runs once
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7b1b      	ldrb	r3, [r3, #12]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d107      	bne.n	8000600 <IR_Receive_Handler+0x24>
		Rec->time_start = TIM1->CNT;	// saves first start time
 80005f0:	4ba1      	ldr	r3, [pc, #644]	@ (8000878 <IR_Receive_Handler+0x29c>)
 80005f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
		Rec->first_interrupt = 0;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	731a      	strb	r2, [r3, #12]
 80005fe:	e01d      	b.n	800063c <IR_Receive_Handler+0x60>
	} else {
		Rec->time_stop = TIM1->CNT;	// saves stop time
 8000600:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <IR_Receive_Handler+0x29c>)
 8000602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	609a      	str	r2, [r3, #8]
		if (Rec->time_start > Rec->time_stop) {	// checks if overflowed
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	429a      	cmp	r2, r3
 8000612:	d909      	bls.n	8000628 <IR_Receive_Handler+0x4c>
			elapsed = (0xFFFF - Rec->time_start) + Rec->time_stop;// calcs elapsed time
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000622:	33ff      	adds	r3, #255	@ 0xff
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e005      	b.n	8000634 <IR_Receive_Handler+0x58>
		} else {
			elapsed = Rec->time_stop - Rec->time_start;	// calcs elapsed time
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]
		}
		Rec->time_start = Rec->time_stop;// saves starttime to stop time for next interrupt
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
	}
	Rec->captured[Rec->position] = elapsed;	// output buffer for data
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000642:	461a      	mov	r2, r3
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3204      	adds	r2, #4
 800064a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	if (Rec->start_state) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 8112 	beq.w	800087e <IR_Receive_Handler+0x2a2>
		switch (Rec->state) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000660:	2b04      	cmp	r3, #4
 8000662:	f200 810c 	bhi.w	800087e <IR_Receive_Handler+0x2a2>
 8000666:	a201      	add	r2, pc, #4	@ (adr r2, 800066c <IR_Receive_Handler+0x90>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	08000681 	.word	0x08000681
 8000670:	080006a1 	.word	0x080006a1
 8000674:	08000751 	.word	0x08000751
 8000678:	08000787 	.word	0x08000787
 800067c:	08000839 	.word	0x08000839
		case 0:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000686:	f340 80f2 	ble.w	800086e <IR_Receive_Handler+0x292>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000690:	4293      	cmp	r3, r2
 8000692:	f300 80ec 	bgt.w	800086e <IR_Receive_Handler+0x292>
				Rec->state = 1;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
//								Rec->state = 0;		// NOTE : if commented code works, if not it enters for some reason
//								Rec->bit_count = 0;
//								Rec->start_state = 0;
			}
			break;
 800069e:	e0e6      	b.n	800086e <IR_Receive_Handler+0x292>
		case 1:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006a6:	dd09      	ble.n	80006bc <IR_Receive_Handler+0xe0>
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f240 52db 	movw	r2, #1499	@ 0x5db
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dc04      	bgt.n	80006bc <IR_Receive_Handler+0xe0>
				Rec->state = 2;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2202      	movs	r2, #2
 80006b6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80006ba:	e01b      	b.n	80006f4 <IR_Receive_Handler+0x118>
			} else if (elapsed > LONG_LOWER && elapsed < LONG_UPPER) {// checks if elapsed long
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80006c2:	4293      	cmp	r3, r2
 80006c4:	dd09      	ble.n	80006da <IR_Receive_Handler+0xfe>
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80006cc:	4293      	cmp	r3, r2
 80006ce:	dc04      	bgt.n	80006da <IR_Receive_Handler+0xfe>
				Rec->state = 3;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2203      	movs	r2, #3
 80006d4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80006d8:	e00c      	b.n	80006f4 <IR_Receive_Handler+0x118>
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;	// NOTE : if commented code works, if not it enters for some reason
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				break;
 80006f2:	e0c4      	b.n	800087e <IR_Receive_Handler+0x2a2>
			}
			Rec->data |= 1 << Rec->bit_count;	// write to data
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000700:	4619      	mov	r1, r3
 8000702:	2301      	movs	r3, #1
 8000704:	408b      	lsls	r3, r1
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	801a      	strh	r2, [r3, #0]
			Rec->bit_count++;// increment the count of the bits already received
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			if (Rec->bit_count == CAPTURED_SIZE) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000728:	2b10      	cmp	r3, #16
 800072a:	f040 80a2 	bne.w	8000872 <IR_Receive_Handler+0x296>
				Rec->state = 0;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				Rec->timeout_counter = 0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
//			if (Rec->bit_count > CAPTURED_SIZE) {// unexpected behaviour : exit statemachine and reset
//				Rec->state = 0;
//				Rec->bit_count = 0;
//				Rec->start_state = 0;
//			}		// commented out because this case will not happen
			break;
 800074e:	e090      	b.n	8000872 <IR_Receive_Handler+0x296>
		case 2:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000756:	dd09      	ble.n	800076c <IR_Receive_Handler+0x190>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800075e:	4293      	cmp	r3, r2
 8000760:	dc04      	bgt.n	800076c <IR_Receive_Handler+0x190>
				Rec->state = 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
				Rec->bit_count = 0;
				Rec->start_state = 0;
			}
			break;
 800076a:	e088      	b.n	800087e <IR_Receive_Handler+0x2a2>
				Rec->state = 0;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			break;
 8000784:	e07b      	b.n	800087e <IR_Receive_Handler+0x2a2>
		case 3:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800078c:	dd09      	ble.n	80007a2 <IR_Receive_Handler+0x1c6>
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000794:	4293      	cmp	r3, r2
 8000796:	dc04      	bgt.n	80007a2 <IR_Receive_Handler+0x1c6>
				Rec->state = 4;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2204      	movs	r2, #4
 800079c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80007a0:	e01b      	b.n	80007da <IR_Receive_Handler+0x1fe>
			} else if (elapsed > LONG_LOWER && elapsed < LONG_UPPER) {// checks if elapsed long
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dd09      	ble.n	80007c0 <IR_Receive_Handler+0x1e4>
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80007b2:	4293      	cmp	r3, r2
 80007b4:	dc04      	bgt.n	80007c0 <IR_Receive_Handler+0x1e4>
				Rec->state = 1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2201      	movs	r2, #1
 80007ba:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80007be:	e00c      	b.n	80007da <IR_Receive_Handler+0x1fe>
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				break;
 80007d8:	e051      	b.n	800087e <IR_Receive_Handler+0x2a2>
			}
			Rec->data &= ~(1 << Rec->bit_count);	// write to data
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80007e6:	4619      	mov	r1, r3
 80007e8:	2301      	movs	r3, #1
 80007ea:	408b      	lsls	r3, r1
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4013      	ands	r3, r2
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	801a      	strh	r2, [r3, #0]
			Rec->bit_count++;// increment the count of the bits already received
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			if (Rec->bit_count == CAPTURED_SIZE) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000812:	2b10      	cmp	r3, #16
 8000814:	d132      	bne.n	800087c <IR_Receive_Handler+0x2a0>
				Rec->state = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				Rec->timeout_counter = 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
//			if (Rec->bit_count > CAPTURED_SIZE) {// unexpected behaviour : exit statemachine and reset
//				Rec->state = 0;
//				Rec->bit_count = 0;
//				Rec->start_state = 0;
//			}		// commented out because this case will not happen
			break;
 8000836:	e021      	b.n	800087c <IR_Receive_Handler+0x2a0>
		case 4:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800083e:	dd09      	ble.n	8000854 <IR_Receive_Handler+0x278>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000846:	4293      	cmp	r3, r2
 8000848:	dc04      	bgt.n	8000854 <IR_Receive_Handler+0x278>
				Rec->state = 3;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2203      	movs	r2, #3
 800084e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
				Rec->bit_count = 0;
				Rec->start_state = 0;
			}
			break;
 8000852:	e014      	b.n	800087e <IR_Receive_Handler+0x2a2>
				Rec->state = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			break;
 800086c:	e007      	b.n	800087e <IR_Receive_Handler+0x2a2>
			break;
 800086e:	bf00      	nop
 8000870:	e005      	b.n	800087e <IR_Receive_Handler+0x2a2>
			break;
 8000872:	bf00      	nop
 8000874:	e003      	b.n	800087e <IR_Receive_Handler+0x2a2>
 8000876:	bf00      	nop
 8000878:	40010000 	.word	0x40010000
			break;
 800087c:	bf00      	nop
		}

	}

	if (elapsed > 2500) {// checks if "breakfield" is detected and enables the statemachine
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000884:	4293      	cmp	r3, r2
 8000886:	dd03      	ble.n	8000890 <IR_Receive_Handler+0x2b4>
		Rec->start_state = 1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2201      	movs	r2, #1
 800088c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	}

	Rec->position++;	// increments position of buffer
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000896:	3301      	adds	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	if (Rec->position > 63) {// handles overflow of buffer, 63 is determined by size captured array
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80008a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a8:	d903      	bls.n	80008b2 <IR_Receive_Handler+0x2d6>
		Rec->position = 0;	// makes buffer circular
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	}
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <init_IR_receiver>:

void init_IR_receiver(struct Receiver *Rec_init) {// sets standard values for structs
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	Rec_init->time_start = 0;			// 0
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
	Rec_init->time_stop = 0;			// 0
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
	Rec_init->first_interrupt = 1;		// 1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	731a      	strb	r2, [r3, #12]
	Rec_init->position = 0;				// 0
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	Rec_init->bit_count = 0;			// 0
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
	Rec_init->state = 0;				// 0
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	Rec_init->start_state = 0;			// 0
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	Rec_init->timeout_counter = 0;		// 0
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000916:	f000 fbfd 	bl	8001114 <HAL_Init>

	/* USER CODE BEGIN Init */
	__HAL_RCC_TIM1_CLK_ENABLE();	// does not work without it
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <main+0x8c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <main+0x8c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <main+0x8c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
	TIM1->CR1 = TIM_CR1_CEN;	// does not work without it
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <main+0x90>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]

	init_IR_receiver(&Receiver1);
 800093c:	4819      	ldr	r0, [pc, #100]	@ (80009a4 <main+0x94>)
 800093e:	f7ff ffbf 	bl	80008c0 <init_IR_receiver>
	init_IR_receiver(&Receiver2);
 8000942:	4819      	ldr	r0, [pc, #100]	@ (80009a8 <main+0x98>)
 8000944:	f7ff ffbc 	bl	80008c0 <init_IR_receiver>
	init_IR_receiver(&Receiver3);
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <main+0x9c>)
 800094a:	f7ff ffb9 	bl	80008c0 <init_IR_receiver>
	init_IR_receiver(&Receiver4);
 800094e:	4818      	ldr	r0, [pc, #96]	@ (80009b0 <main+0xa0>)
 8000950:	f7ff ffb6 	bl	80008c0 <init_IR_receiver>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000954:	f000 f832 	bl	80009bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000958:	f000 f9f8 	bl	8000d4c <MX_GPIO_Init>
	MX_TIM1_Init();
 800095c:	f000 f88c 	bl	8000a78 <MX_TIM1_Init>
	MX_TIM5_Init();
 8000960:	f000 f9a6 	bl	8000cb0 <MX_TIM5_Init>
	MX_TIM3_Init();
 8000964:	f000 f8d8 	bl	8000b18 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000968:	f000 f954 	bl	8000c14 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)// error handler for PDLC PWM
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <main+0xa4>)
 800096e:	f001 fb65 	bl	800203c <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <main+0x6c>
			{
		/* Starting Error */
		Error_Handler();
 8000978:	f000 fa6c 	bl	8000e54 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800097c:	2108      	movs	r1, #8
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <main+0xa4>)
 8000980:	f001 fc18 	bl	80021b4 <HAL_TIM_PWM_Start>

	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) {
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <main+0xa8>)
 8000986:	f001 fb59 	bl	800203c <HAL_TIM_Base_Start_IT>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <main+0x86>
		/* Starting Error */
		Error_Handler();
 8000990:	f000 fa60 	bl	8000e54 <Error_Handler>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	e7fd      	b.n	8000996 <main+0x86>
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40010000 	.word	0x40010000
 80009a4:	2000014c 	.word	0x2000014c
 80009a8:	2000026c 	.word	0x2000026c
 80009ac:	2000038c 	.word	0x2000038c
 80009b0:	200004ac 	.word	0x200004ac
 80009b4:	20000070 	.word	0x20000070
 80009b8:	200000b8 	.word	0x200000b8

080009bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	@ 0x50
 80009c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	@ 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fa9e 	bl	8002f0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <SystemClock_Config+0xb4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <SystemClock_Config+0xb4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <SystemClock_Config+0xb4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <SystemClock_Config+0xb8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <SystemClock_Config+0xb8>)
 8000a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <SystemClock_Config+0xb8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fe91 	bl	8001754 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x80>
		Error_Handler();
 8000a38:	f000 fa0c 	bl	8000e54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f8f4 	bl	8001c44 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xaa>
		Error_Handler();
 8000a62:	f000 f9f7 	bl	8000e54 <Error_Handler>
	}
}
 8000a66:	bf00      	nop
 8000a68:	3750      	adds	r7, #80	@ 0x50
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <MX_TIM1_Init+0x9c>)
 8000a98:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16 - 1;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000aa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aac:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000ac2:	f001 fa6b 	bl	8001f9c <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000acc:	f000 f9c2 	bl	8000e54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000ade:	f001 fdcb 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x74>
		Error_Handler();
 8000ae8:	f000 f9b4 	bl	8000e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_TIM1_Init+0x98>)
 8000afa:	f002 f985 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b04:	f000 f9a6 	bl	8000e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000028 	.word	0x20000028
 8000b14:	40010000 	.word	0x40010000

08000b18 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	@ 0x38
 8000b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b48:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b4a:	4a31      	ldr	r2, [pc, #196]	@ (8000c10 <MX_TIM3_Init+0xf8>)
 8000b4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16 - 1;
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b50:	220f      	movs	r2, #15
 8000b52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000 - 1;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b5c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b60:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000b6e:	4827      	ldr	r0, [pc, #156]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b70:	f001 fa14 	bl	8001f9c <HAL_TIM_Base_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x66>
		Error_Handler();
 8000b7a:	f000 f96b 	bl	8000e54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b8c:	f001 fd74 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x82>
		Error_Handler();
 8000b96:	f000 f95d 	bl	8000e54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000b9a:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000b9c:	f001 fab0 	bl	8002100 <HAL_TIM_PWM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x92>
		Error_Handler();
 8000ba6:	f000 f955 	bl	8000e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4814      	ldr	r0, [pc, #80]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000bba:	f002 f925 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000bc4:	f000 f946 	bl	8000e54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	@ 0x60
 8000bca:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2208      	movs	r2, #8
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000be0:	f001 fc88 	bl	80024f4 <HAL_TIM_PWM_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000bea:	f000 f933 	bl	8000e54 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	69da      	ldr	r2, [r3, #28]
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0208 	bic.w	r2, r2, #8
 8000bfc:	61da      	str	r2, [r3, #28]
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000bfe:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM3_Init+0xf4>)
 8000c00:	f000 f9c0 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	@ 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000070 	.word	0x20000070
 8000c10:	40000400 	.word	0x40000400

08000c14 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c32:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <MX_TIM4_Init+0x98>)
 8000c34:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c38:	2210      	movs	r2, #16
 8000c3a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c44:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c48:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000c56:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c58:	f001 f9a0 	bl	8001f9c <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM4_Init+0x52>
		Error_Handler();
 8000c62:	f000 f8f7 	bl	8000e54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c74:	f001 fd00 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8000c7e:	f000 f8e9 	bl	8000e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_TIM4_Init+0x94>)
 8000c90:	f002 f8ba 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000c9a:	f000 f8db 	bl	8000e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000b8 	.word	0x200000b8
 8000cac:	40000800 	.word	0x40000800

08000cb0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000cce:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <MX_TIM5_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000cf2:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000cf4:	f001 f952 	bl	8001f9c <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM5_Init+0x52>
		Error_Handler();
 8000cfe:	f000 f8a9 	bl	8000e54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000d10:	f001 fcb2 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM5_Init+0x6e>
		Error_Handler();
 8000d1a:	f000 f89b 	bl	8000e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM5_Init+0x94>)
 8000d2c:	f002 f86c 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000d36:	f000 f88d 	bl	8000e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000100 	.word	0x20000100
 8000d48:	40000c00 	.word	0x40000c00

08000d4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PA8 PA9 PA10 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8000d9a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000da0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000da4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <MX_GPIO_Init+0x98>)
 8000db2:	f000 fb33 	bl	800141c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2017      	movs	r0, #23
 8000dbc:	f000 faf7 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dc0:	2017      	movs	r0, #23
 8000dc2:	f000 fb10 	bl	80013e6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2028      	movs	r0, #40	@ 0x28
 8000dcc:	f000 faef 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd0:	2028      	movs	r0, #40	@ 0x28
 8000dd2:	f000 fb08 	bl	80013e6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000df8:	d01b      	beq.n	8000e32 <HAL_GPIO_EXTI_Callback+0x4a>
 8000dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000dfe:	dc1c      	bgt.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e04:	d011      	beq.n	8000e2a <HAL_GPIO_EXTI_Callback+0x42>
 8000e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e0a:	dc16      	bgt.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
 8000e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_EXTI_Callback+0x32>
 8000e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e16:	d004      	beq.n	8000e22 <HAL_GPIO_EXTI_Callback+0x3a>
		break;
	case GPIO_PIN_11:	// case for pin 6 different for PCB
		IR_Receive_Handler(&Receiver4);	// function to handle the IR data
		break;
	}
}
 8000e18:	e00f      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver1);	// function to handle the IR data
 8000e1a:	480a      	ldr	r0, [pc, #40]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e1c:	f7ff fbde 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e20:	e00b      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver2);	// function to handle the IR data
 8000e22:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e24:	f7ff fbda 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e28:	e007      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver3);	// function to handle the IR data
 8000e2a:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <HAL_GPIO_EXTI_Callback+0x64>)
 8000e2c:	f7ff fbd6 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver4);	// function to handle the IR data
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e34:	f7ff fbd2 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e38:	bf00      	nop
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000014c 	.word	0x2000014c
 8000e48:	2000026c 	.word	0x2000026c
 8000e4c:	2000038c 	.word	0x2000038c
 8000e50:	200004ac 	.word	0x200004ac

08000e54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8000f70 <HAL_TIM_Base_MspInit+0xc0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10e      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a2a      	ldr	r2, [pc, #168]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000ede:	e042      	b.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a24      	ldr	r2, [pc, #144]	@ (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10e      	bne.n	8000f08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
}
 8000f06:	e02e      	b.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f7c <HAL_TIM_Base_MspInit+0xcc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d116      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201e      	movs	r0, #30
 8000f34:	f000 fa3b 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f38:	201e      	movs	r0, #30
 8000f3a:	f000 fa54 	bl	80013e6 <HAL_NVIC_EnableIRQ>
}
 8000f3e:	e012      	b.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <HAL_TIM_Base_MspInit+0xd0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010000 	.word	0x40010000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40000400 	.word	0x40000400
 8000f7c:	40000800 	.word	0x40000800
 8000f80:	40000c00 	.word	0x40000c00

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11d      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_TIM_MspPostInit+0x70>)
 8000fde:	f000 fa1d 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104e:	f000 f8b3 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}

08001056 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800105a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800105e:	f000 fb61 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f000 fb5d 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <TIM4_IRQHandler+0x10>)
 8001076:	f001 f94d 	bl	8002314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000b8 	.word	0x200000b8

08001084 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001088:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800108c:	f000 fb4a 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001090:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001094:	f000 fb46 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010c4:	f7ff ffea 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	@ (8001100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	@ (800110c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f001 ff15 	bl	8002f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fc0d 	bl	8000910 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001104:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8001108:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800110c:	200005d0 	.word	0x200005d0

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f92b 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	200f      	movs	r0, #15
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fe8a 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f943 	bl	8001402 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f90b 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	@ (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200005cc 	.word	0x200005cc

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200005cc 	.word	0x200005cc

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	@ (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e159      	b.n	80016ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8148 	bne.w	80016e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a2 	beq.w	80016e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x202>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a48      	ldr	r2, [pc, #288]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1fe>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a47      	ldr	r2, [pc, #284]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1fa>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1f6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1f2>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800160e:	2307      	movs	r3, #7
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f aea2 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb50 	bl	8000de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e267      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d075      	beq.n	800185e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001772:	4b88      	ldr	r3, [pc, #544]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d00c      	beq.n	8001798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b85      	ldr	r3, [pc, #532]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001786:	2b08      	cmp	r3, #8
 8001788:	d112      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178a:	4b82      	ldr	r3, [pc, #520]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001796:	d10b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	4b7e      	ldr	r3, [pc, #504]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d05b      	beq.n	800185c <HAL_RCC_OscConfig+0x108>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d157      	bne.n	800185c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e242      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x74>
 80017ba:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a75      	ldr	r2, [pc, #468]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b70      	ldr	r3, [pc, #448]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017ec:	4b69      	ldr	r3, [pc, #420]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a68      	ldr	r2, [pc, #416]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a65      	ldr	r2, [pc, #404]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fce8 	bl	80011e0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fce4 	bl	80011e0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e207      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xc0>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fcd4 	bl	80011e0 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fcd0 	bl	80011e0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1f3      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0xe8>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186a:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1c7      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4937      	ldr	r1, [pc, #220]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc89 	bl	80011e0 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fc85 	bl	80011e0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1a8      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4925      	ldr	r1, [pc, #148]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fc68 	bl	80011e0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fc64 	bl	80011e0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e187      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d036      	beq.n	80019ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fc48 	bl	80011e0 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fc44 	bl	80011e0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e167      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x200>
 8001972:	e01b      	b.n	80019ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fc31 	bl	80011e0 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	e00e      	b.n	80019a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fc2d 	bl	80011e0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d907      	bls.n	80019a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e150      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000
 800199c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ea      	bne.n	8001982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8097 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b81      	ldr	r3, [pc, #516]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b77      	ldr	r3, [pc, #476]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f6:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a73      	ldr	r2, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fbed 	bl	80011e0 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff fbe9 	bl	80011e0 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e10c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2ea>
 8001a30:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	4a63      	ldr	r2, [pc, #396]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x30c>
 8001a46:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a52:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a56:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a60:	4b58      	ldr	r3, [pc, #352]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6c:	4b55      	ldr	r3, [pc, #340]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a70:	4a54      	ldr	r2, [pc, #336]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a72:	f023 0304 	bic.w	r3, r3, #4
 8001a76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fbae 	bl	80011e0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fbaa 	bl	80011e0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0cb      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ee      	beq.n	8001a88 <HAL_RCC_OscConfig+0x334>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fb98 	bl	80011e0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb94 	bl	80011e0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0b5      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ee      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a38      	ldr	r2, [pc, #224]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a1 	beq.w	8001c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d05c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d141      	bne.n	8001b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb68 	bl	80011e0 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff fb64 	bl	80011e0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e087      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	491b      	ldr	r1, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb3d 	bl	80011e0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fb39 	bl	80011e0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e05c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x416>
 8001b88:	e054      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb26 	bl	80011e0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fb22 	bl	80011e0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e045      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x444>
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e038      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x4ec>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d028      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d121      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0cc      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b68      	ldr	r3, [pc, #416]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d90c      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d044      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d119      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e067      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4934      	ldr	r1, [pc, #208]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d34:	f7ff fa54 	bl	80011e0 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7ff fa50 	bl	80011e0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20c      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f9b4 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08002f7c 	.word	0x08002f7c
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b090      	sub	sp, #64	@ 0x40
 8001e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d00d      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x40>
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f200 80a1 	bhi.w	8001f7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e42:	e09b      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001e48:	e09b      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e4e:	e098      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e50:	4b4f      	ldr	r3, [pc, #316]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d028      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e7c:	fb03 f201 	mul.w	r2, r3, r1
 8001e80:	2300      	movs	r3, #0
 8001e82:	fb00 f303 	mul.w	r3, r0, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	4a43      	ldr	r2, [pc, #268]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e90:	460a      	mov	r2, r1
 8001e92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e96:	4413      	add	r3, r2
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	61fa      	str	r2, [r7, #28]
 8001ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eaa:	f7fe f995 	bl	80001d8 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eb6:	e053      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb8:	4b35      	ldr	r3, [pc, #212]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	617a      	str	r2, [r7, #20]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eca:	f04f 0b00 	mov.w	fp, #0
 8001ece:	4652      	mov	r2, sl
 8001ed0:	465b      	mov	r3, fp
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eea:	eb63 090b 	sbc.w	r9, r3, fp
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001efa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001efe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f02:	ebb2 0408 	subs.w	r4, r2, r8
 8001f06:	eb63 0509 	sbc.w	r5, r3, r9
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	00eb      	lsls	r3, r5, #3
 8001f14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f18:	00e2      	lsls	r2, r4, #3
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	eb14 030a 	adds.w	r3, r4, sl
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	eb45 030b 	adc.w	r3, r5, fp
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f36:	4629      	mov	r1, r5
 8001f38:	028b      	lsls	r3, r1, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f40:	4621      	mov	r1, r4
 8001f42:	028a      	lsls	r2, r1, #10
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	60fa      	str	r2, [r7, #12]
 8001f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f54:	f7fe f940 	bl	80001d8 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001f70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3740      	adds	r7, #64	@ 0x40
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	017d7840 	.word	0x017d7840

08001f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e041      	b.n	8002032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe ff74 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f000 fc3c 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d001      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e044      	b.n	80020de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1e      	ldr	r2, [pc, #120]	@ (80020ec <HAL_TIM_Base_Start_IT+0xb0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d018      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207e:	d013      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00e      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x6c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x6c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a16      	ldr	r2, [pc, #88]	@ (80020fc <HAL_TIM_Base_Start_IT+0xc0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d010      	beq.n	80020dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	e007      	b.n	80020dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40014000 	.word	0x40014000

08002100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f839 	bl	800219e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fb8a 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_TIM_PWM_Start+0x24>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e022      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d109      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e015      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_TIM_PWM_Start+0x58>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e008      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e068      	b.n	80022f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0x82>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	e013      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0x92>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002244:	e00b      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_TIM_PWM_Start+0xa2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002254:	e003      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fda8 	bl	8002dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_TIM_PWM_Start+0x14c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d107      	bne.n	8002286 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_TIM_PWM_Start+0x14c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x10e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d013      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x10e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <HAL_TIM_PWM_Start+0x150>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x10e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <HAL_TIM_PWM_Start+0x154>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x10e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	@ (800230c <HAL_TIM_PWM_Start+0x158>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x10e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_TIM_PWM_Start+0x15c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d111      	bne.n	80022e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	d010      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	e007      	b.n	80022f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40010000 	.word	0x40010000
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800
 800230c:	40000c00 	.word	0x40000c00
 8002310:	40014000 	.word	0x40014000

08002314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0202 	mvn.w	r2, #2
 8002348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa5b 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa4d 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fa5e 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d020      	beq.n	80023c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0204 	mvn.w	r2, #4
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa35 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa27 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fa38 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d020      	beq.n	8002410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0208 	mvn.w	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa0f 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa01 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa12 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d020      	beq.n	800245c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0210 	mvn.w	r2, #16
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2208      	movs	r2, #8
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f9e9 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9db 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f9ec 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0201 	mvn.w	r2, #1
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe f840 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fd2a 	bl	8002ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9bd 	bl	8002842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0220 	mvn.w	r2, #32
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fcfc 	bl	8002ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800250e:	2302      	movs	r3, #2
 8002510:	e0ae      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	f200 809f 	bhi.w	8002660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002522:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	0800255d 	.word	0x0800255d
 800252c:	08002661 	.word	0x08002661
 8002530:	08002661 	.word	0x08002661
 8002534:	08002661 	.word	0x08002661
 8002538:	0800259d 	.word	0x0800259d
 800253c:	08002661 	.word	0x08002661
 8002540:	08002661 	.word	0x08002661
 8002544:	08002661 	.word	0x08002661
 8002548:	080025df 	.word	0x080025df
 800254c:	08002661 	.word	0x08002661
 8002550:	08002661 	.word	0x08002661
 8002554:	08002661 	.word	0x08002661
 8002558:	0800261f 	.word	0x0800261f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fa04 	bl	8002970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6999      	ldr	r1, [r3, #24]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	619a      	str	r2, [r3, #24]
      break;
 800259a:	e064      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fa4a 	bl	8002a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	619a      	str	r2, [r3, #24]
      break;
 80025dc:	e043      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fa95 	bl	8002b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0208 	orr.w	r2, r2, #8
 80025f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0204 	bic.w	r2, r2, #4
 8002608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69d9      	ldr	r1, [r3, #28]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
      break;
 800261c:	e023      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fadf 	bl	8002be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
      break;
 800265e:	e002      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
      break;
 8002664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_TIM_ConfigClockSource+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e0b4      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x186>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026cc:	d03e      	beq.n	800274c <HAL_TIM_ConfigClockSource+0xd4>
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d2:	f200 8087 	bhi.w	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026da:	f000 8086 	beq.w	80027ea <HAL_TIM_ConfigClockSource+0x172>
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e2:	d87f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b70      	cmp	r3, #112	@ 0x70
 80026e6:	d01a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xa6>
 80026e8:	2b70      	cmp	r3, #112	@ 0x70
 80026ea:	d87b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b60      	cmp	r3, #96	@ 0x60
 80026ee:	d050      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x11a>
 80026f0:	2b60      	cmp	r3, #96	@ 0x60
 80026f2:	d877      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b50      	cmp	r3, #80	@ 0x50
 80026f6:	d03c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xfa>
 80026f8:	2b50      	cmp	r3, #80	@ 0x50
 80026fa:	d873      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b40      	cmp	r3, #64	@ 0x40
 80026fe:	d058      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d86f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b30      	cmp	r3, #48	@ 0x30
 8002706:	d064      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002708:	2b30      	cmp	r3, #48	@ 0x30
 800270a:	d86b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d060      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d867      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05c      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	2b10      	cmp	r3, #16
 800271a:	d05a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	e062      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	f000 fb25 	bl	8002d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]
      break;
 800274a:	e04f      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800275c:	f000 fb0e 	bl	8002d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e03c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277e:	461a      	mov	r2, r3
 8002780:	f000 fa82 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2150      	movs	r1, #80	@ 0x50
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fadb 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002790:	e02c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 faa1 	bl	8002ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2160      	movs	r1, #96	@ 0x60
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 facb 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e01c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 fa62 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2140      	movs	r1, #64	@ 0x40
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fabb 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e00c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f000 fab2 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 80027e2:	e003      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e000      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <TIM_Base_SetConfig+0xfc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00f      	beq.n	8002890 <TIM_Base_SetConfig+0x38>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002876:	d00b      	beq.n	8002890 <TIM_Base_SetConfig+0x38>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a37      	ldr	r2, [pc, #220]	@ (8002958 <TIM_Base_SetConfig+0x100>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_Base_SetConfig+0x38>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a36      	ldr	r2, [pc, #216]	@ (800295c <TIM_Base_SetConfig+0x104>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_Base_SetConfig+0x38>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <TIM_Base_SetConfig+0x108>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d108      	bne.n	80028a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002954 <TIM_Base_SetConfig+0xfc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01b      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b0:	d017      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a28      	ldr	r2, [pc, #160]	@ (8002958 <TIM_Base_SetConfig+0x100>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a27      	ldr	r2, [pc, #156]	@ (800295c <TIM_Base_SetConfig+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00f      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <TIM_Base_SetConfig+0x108>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <TIM_Base_SetConfig+0x10c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a24      	ldr	r2, [pc, #144]	@ (8002968 <TIM_Base_SetConfig+0x110>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a23      	ldr	r2, [pc, #140]	@ (800296c <TIM_Base_SetConfig+0x114>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0e      	ldr	r2, [pc, #56]	@ (8002954 <TIM_Base_SetConfig+0xfc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
  }
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40010000 	.word	0x40010000
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	40014000 	.word	0x40014000
 8002968:	40014400 	.word	0x40014400
 800296c:	40014800 	.word	0x40014800

08002970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 0201 	bic.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <TIM_OC1_SetConfig+0xc8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10c      	bne.n	80029e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0308 	bic.w	r3, r3, #8
 80029d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <TIM_OC1_SetConfig+0xc8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d111      	bne.n	8002a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40010000 	.word	0x40010000

08002a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0210 	bic.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <TIM_OC2_SetConfig+0xd4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10d      	bne.n	8002ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <TIM_OC2_SetConfig+0xd4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d113      	bne.n	8002ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000

08002b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <TIM_OC3_SetConfig+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10d      	bne.n	8002b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <TIM_OC3_SetConfig+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d113      	bne.n	8002bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	621a      	str	r2, [r3, #32]
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40010000 	.word	0x40010000

08002be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	031b      	lsls	r3, r3, #12
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <TIM_OC4_SetConfig+0x9c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d109      	bne.n	8002c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000

08002c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f023 0210 	bic.w	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f043 0307 	orr.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e050      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6c:	d013      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40014000 	.word	0x40014000

08002ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <__libc_init_array>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8002f54 <__libc_init_array+0x38>)
 8002f20:	4c0d      	ldr	r4, [pc, #52]	@ (8002f58 <__libc_init_array+0x3c>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	2600      	movs	r6, #0
 8002f28:	42a6      	cmp	r6, r4
 8002f2a:	d109      	bne.n	8002f40 <__libc_init_array+0x24>
 8002f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f5c <__libc_init_array+0x40>)
 8002f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8002f60 <__libc_init_array+0x44>)
 8002f30:	f000 f818 	bl	8002f64 <_init>
 8002f34:	1b64      	subs	r4, r4, r5
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	2600      	movs	r6, #0
 8002f3a:	42a6      	cmp	r6, r4
 8002f3c:	d105      	bne.n	8002f4a <__libc_init_array+0x2e>
 8002f3e:	bd70      	pop	{r4, r5, r6, pc}
 8002f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f44:	4798      	blx	r3
 8002f46:	3601      	adds	r6, #1
 8002f48:	e7ee      	b.n	8002f28 <__libc_init_array+0xc>
 8002f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4e:	4798      	blx	r3
 8002f50:	3601      	adds	r6, #1
 8002f52:	e7f2      	b.n	8002f3a <__libc_init_array+0x1e>
 8002f54:	08002f94 	.word	0x08002f94
 8002f58:	08002f94 	.word	0x08002f94
 8002f5c:	08002f94 	.word	0x08002f94
 8002f60:	08002f98 	.word	0x08002f98

08002f64 <_init>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr

08002f70 <_fini>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr
