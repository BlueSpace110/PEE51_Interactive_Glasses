
IR_Bril_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002fbc  08002fbc  00003fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fd4  08002fd4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00003fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00003fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002fdc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  08002fe8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08002fe8  000045d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ff3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  0000d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b2c  00000000  00000000  0000f842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4fb  00000000  00000000  0002536e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5b9  00000000  00000000  0002f869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bae22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000bae68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bd6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fa4 	.word	0x08002fa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002fa4 	.word	0x08002fa4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <IR_Timeout>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void IR_Timeout(struct Receiver *Rec) {	// increments IR Receivers timeout counter and checks if timeout has reached threshold
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (Rec->timeout_counter > TIMEOUT_THRESHOLD) {// checks if counter of timeout has reached threshold
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80004d6:	2b64      	cmp	r3, #100	@ 0x64
 80004d8:	d903      	bls.n	80004e2 <IR_Timeout+0x1a>
		Rec->data = 0;					// resets data of receiver
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
	} else {
		Rec->timeout_counter++;		// increments counter of timeout
	}
}
 80004e0:	e007      	b.n	80004f2 <IR_Timeout+0x2a>
		Rec->timeout_counter++;		// increments counter of timeout
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
//	TIM3->CCR3 = (Receiver4.data >> 1) * 40;// !WIP! updates dutycycle of PDLC PWM from received data (only receiver4 for now)

	IR_Timeout(&Receiver1);	// handles calcs and compares for IR timeout of receiver
 8000508:	482d      	ldr	r0, [pc, #180]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800050a:	f7ff ffdd 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver2);
 800050e:	482d      	ldr	r0, [pc, #180]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000510:	f7ff ffda 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver3);
 8000514:	482c      	ldr	r0, [pc, #176]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000516:	f7ff ffd7 	bl	80004c8 <IR_Timeout>
	IR_Timeout(&Receiver4);
 800051a:	482c      	ldr	r0, [pc, #176]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800051c:	f7ff ffd4 	bl	80004c8 <IR_Timeout>

	uint8_t PDLC_candidate = Receiver1.data >> 1;	// writes data to PDLC_Candidate
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	085b      	lsrs	r3, r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	73fb      	strb	r3, [r7, #15]
	if(Receiver2.data > PDLC_candidate) {
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	b29b      	uxth	r3, r3
 8000532:	429a      	cmp	r2, r3
 8000534:	d904      	bls.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x40>
		PDLC_candidate = Receiver2.data >> 1;
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	085b      	lsrs	r3, r3, #1
 800053c:	b29b      	uxth	r3, r3
 800053e:	73fb      	strb	r3, [r7, #15]
	}
	if(Receiver3.data > PDLC_candidate) {
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000542:	881a      	ldrh	r2, [r3, #0]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	b29b      	uxth	r3, r3
 8000548:	429a      	cmp	r2, r3
 800054a:	d904      	bls.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x56>
		PDLC_candidate = Receiver3.data >> 1;
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b29b      	uxth	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
	}
	if(Receiver4.data > PDLC_candidate) {
 8000556:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	b29b      	uxth	r3, r3
 800055e:	429a      	cmp	r2, r3
 8000560:	d904      	bls.n	800056c <HAL_TIM_PeriodElapsedCallback+0x6c>
		PDLC_candidate = Receiver4.data >> 1;
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	b29b      	uxth	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]
	}

	PDLC_setpoint = PDLC_candidate * 40;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	b29b      	uxth	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800057c:	801a      	strh	r2, [r3, #0]

	if (PDLC_realpoint < PDLC_setpoint){
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d206      	bcs.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x98>
		PDLC_realpoint+= FADEIN_SPEED;
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	3380      	adds	r3, #128	@ 0x80
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000594:	801a      	strh	r2, [r3, #0]
 8000596:	e00b      	b.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0xb0>
	} else if (PDLC_realpoint > PDLC_setpoint){
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800059a:	881a      	ldrh	r2, [r3, #0]
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d905      	bls.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		PDLC_realpoint-= FADEIN_SPEED;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	3b80      	subs	r3, #128	@ 0x80
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005ae:	801a      	strh	r2, [r3, #0]
	}
	TIM3->CCR3 = PDLC_realpoint;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80005b6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000014c 	.word	0x2000014c
 80005c4:	2000026c 	.word	0x2000026c
 80005c8:	2000038c 	.word	0x2000038c
 80005cc:	200004ac 	.word	0x200004ac
 80005d0:	20000148 	.word	0x20000148
 80005d4:	2000014a 	.word	0x2000014a
 80005d8:	40000400 	.word	0x40000400

080005dc <IR_Receive_Handler>:

void IR_Receive_Handler(struct Receiver *Rec) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int elapsed = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	if (Rec->first_interrupt == 1) {	// only runs once
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7b1b      	ldrb	r3, [r3, #12]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d107      	bne.n	8000600 <IR_Receive_Handler+0x24>
		Rec->time_start = TIM1->CNT;	// saves first start time
 80005f0:	4ba9      	ldr	r3, [pc, #676]	@ (8000898 <IR_Receive_Handler+0x2bc>)
 80005f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
		Rec->first_interrupt = 0;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	731a      	strb	r2, [r3, #12]
 80005fe:	e01d      	b.n	800063c <IR_Receive_Handler+0x60>
	} else {
		Rec->time_stop = TIM1->CNT;	// saves stop time
 8000600:	4ba5      	ldr	r3, [pc, #660]	@ (8000898 <IR_Receive_Handler+0x2bc>)
 8000602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	609a      	str	r2, [r3, #8]
		if (Rec->time_start > Rec->time_stop) {	// checks if overflowed
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	429a      	cmp	r2, r3
 8000612:	d909      	bls.n	8000628 <IR_Receive_Handler+0x4c>
			elapsed = (0xFFFF - Rec->time_start) + Rec->time_stop;// calcs elapsed time
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000622:	33ff      	adds	r3, #255	@ 0xff
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e005      	b.n	8000634 <IR_Receive_Handler+0x58>
		} else {
			elapsed = Rec->time_stop - Rec->time_start;	// calcs elapsed time
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]
		}
		Rec->time_start = Rec->time_stop;// saves starttime to stop time for next interrupt
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
	}
	Rec->captured[Rec->position] = elapsed;	// output buffer for data
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000642:	461a      	mov	r2, r3
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3204      	adds	r2, #4
 800064a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	if (Rec->start_state) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 8133 	beq.w	80008c0 <IR_Receive_Handler+0x2e4>
		switch (Rec->state) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000660:	2b04      	cmp	r3, #4
 8000662:	f200 812d 	bhi.w	80008c0 <IR_Receive_Handler+0x2e4>
 8000666:	a201      	add	r2, pc, #4	@ (adr r2, 800066c <IR_Receive_Handler+0x90>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	08000681 	.word	0x08000681
 8000670:	080006a1 	.word	0x080006a1
 8000674:	08000773 	.word	0x08000773
 8000678:	080007a9 	.word	0x080007a9
 800067c:	0800087d 	.word	0x0800087d
		case 0:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000686:	f340 8116 	ble.w	80008b6 <IR_Receive_Handler+0x2da>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000690:	4293      	cmp	r3, r2
 8000692:	f300 8110 	bgt.w	80008b6 <IR_Receive_Handler+0x2da>
				Rec->state = 1;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
//								Rec->state = 0;		// NOTE : if commented code works, if not it enters for some reason
//								Rec->bit_count = 0;
//								Rec->start_state = 0;
			}
			break;
 800069e:	e10a      	b.n	80008b6 <IR_Receive_Handler+0x2da>
		case 1:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006a6:	dd09      	ble.n	80006bc <IR_Receive_Handler+0xe0>
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f240 52db 	movw	r2, #1499	@ 0x5db
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dc04      	bgt.n	80006bc <IR_Receive_Handler+0xe0>
				Rec->state = 2;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2202      	movs	r2, #2
 80006b6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80006ba:	e01b      	b.n	80006f4 <IR_Receive_Handler+0x118>
			} else if (elapsed > LONG_LOWER && elapsed < LONG_UPPER) {// checks if elapsed long
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80006c2:	4293      	cmp	r3, r2
 80006c4:	dd09      	ble.n	80006da <IR_Receive_Handler+0xfe>
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80006cc:	4293      	cmp	r3, r2
 80006ce:	dc04      	bgt.n	80006da <IR_Receive_Handler+0xfe>
				Rec->state = 3;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2203      	movs	r2, #3
 80006d4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80006d8:	e00c      	b.n	80006f4 <IR_Receive_Handler+0x118>
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;	// NOTE : if commented code works, if not it enters for some reason
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				break;
 80006f2:	e0e5      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
			}
			Rec->data |= 1 << Rec->bit_count;	// write to data
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000700:	4619      	mov	r1, r3
 8000702:	2301      	movs	r3, #1
 8000704:	408b      	lsls	r3, r1
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	801a      	strh	r2, [r3, #0]
			Rec->bit_count++;// increment the count of the bits already received
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			if (Rec->bit_count == CAPTURED_SIZE) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000728:	2b10      	cmp	r3, #16
 800072a:	d10f      	bne.n	800074c <IR_Receive_Handler+0x170>
				Rec->state = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				Rec->timeout_counter = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
			}
			if (Rec->bit_count > CAPTURED_SIZE) {// unexpected behaviour : exit statemachine and reset
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000752:	2b10      	cmp	r3, #16
 8000754:	f240 80b1 	bls.w	80008ba <IR_Receive_Handler+0x2de>
				Rec->state = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			}
			break;
 8000770:	e0a3      	b.n	80008ba <IR_Receive_Handler+0x2de>
		case 2:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000778:	dd09      	ble.n	800078e <IR_Receive_Handler+0x1b2>
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000780:	4293      	cmp	r3, r2
 8000782:	dc04      	bgt.n	800078e <IR_Receive_Handler+0x1b2>
				Rec->state = 1;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
				Rec->bit_count = 0;
				Rec->start_state = 0;
			}
			break;
 800078c:	e098      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
				Rec->state = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			break;
 80007a6:	e08b      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
		case 3:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007ae:	dd09      	ble.n	80007c4 <IR_Receive_Handler+0x1e8>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80007b6:	4293      	cmp	r3, r2
 80007b8:	dc04      	bgt.n	80007c4 <IR_Receive_Handler+0x1e8>
				Rec->state = 4;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2204      	movs	r2, #4
 80007be:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80007c2:	e01b      	b.n	80007fc <IR_Receive_Handler+0x220>
			} else if (elapsed > LONG_LOWER && elapsed < LONG_UPPER) {// checks if elapsed long
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007ca:	4293      	cmp	r3, r2
 80007cc:	dd09      	ble.n	80007e2 <IR_Receive_Handler+0x206>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80007d4:	4293      	cmp	r3, r2
 80007d6:	dc04      	bgt.n	80007e2 <IR_Receive_Handler+0x206>
				Rec->state = 1;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2201      	movs	r2, #1
 80007dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80007e0:	e00c      	b.n	80007fc <IR_Receive_Handler+0x220>
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				break;
 80007fa:	e061      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
			}
			Rec->data &= ~(1 << Rec->bit_count);	// write to data
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b21a      	sxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000808:	4619      	mov	r1, r3
 800080a:	2301      	movs	r3, #1
 800080c:	408b      	lsls	r3, r1
 800080e:	b21b      	sxth	r3, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	b21b      	sxth	r3, r3
 8000814:	4013      	ands	r3, r2
 8000816:	b21b      	sxth	r3, r3
 8000818:	b29a      	uxth	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
			Rec->bit_count++;// increment the count of the bits already received
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			if (Rec->bit_count == CAPTURED_SIZE) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000834:	2b10      	cmp	r3, #16
 8000836:	d10f      	bne.n	8000858 <IR_Receive_Handler+0x27c>
				Rec->state = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				Rec->timeout_counter = 0;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
			}
			if (Rec->bit_count > CAPTURED_SIZE) {// unexpected behaviour : exit statemachine and reset
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800085e:	2b10      	cmp	r3, #16
 8000860:	d92d      	bls.n	80008be <IR_Receive_Handler+0x2e2>
				Rec->state = 0;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			}
			break;
 800087a:	e020      	b.n	80008be <IR_Receive_Handler+0x2e2>
		case 4:
			if (elapsed > SHORT_LOWER && elapsed < SHORT_UPPER) {// checks if elapsed short
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000882:	dd0b      	ble.n	800089c <IR_Receive_Handler+0x2c0>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f240 52db 	movw	r2, #1499	@ 0x5db
 800088a:	4293      	cmp	r3, r2
 800088c:	dc06      	bgt.n	800089c <IR_Receive_Handler+0x2c0>
				Rec->state = 3;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2203      	movs	r2, #3
 8000892:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
			} else {	// unexpected behaviour : exit statemachine and reset
				Rec->state = 0;
				Rec->bit_count = 0;
				Rec->start_state = 0;
			}
			break;
 8000896:	e013      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
 8000898:	40010000 	.word	0x40010000
				Rec->state = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
				Rec->bit_count = 0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				Rec->start_state = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			break;
 80008b4:	e004      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
			break;
 80008b6:	bf00      	nop
 80008b8:	e002      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
			break;
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <IR_Receive_Handler+0x2e4>
			break;
 80008be:	bf00      	nop
		}

	}

	if (elapsed > 2500) {// checks if "breakfield" is detected and enables the statemachine
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80008c6:	4293      	cmp	r3, r2
 80008c8:	dd03      	ble.n	80008d2 <IR_Receive_Handler+0x2f6>
		Rec->start_state = 1;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	}

	Rec->position++;	// increments position of buffer
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	if (Rec->position > 63) {// handles overflow of buffer, 63 is determined by size captured array
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80008e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ea:	d903      	bls.n	80008f4 <IR_Receive_Handler+0x318>
		Rec->position = 0;	// makes buffer circular
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	}
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <init_IR_receiver>:

void init_IR_receiver(struct Receiver *Rec_init) {// sets standard values for structs
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	Rec_init->time_start = 0;			// 0
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
	Rec_init->time_stop = 0;			// 0
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	Rec_init->first_interrupt = 1;		// 1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	731a      	strb	r2, [r3, #12]
	Rec_init->position = 0;				// 0
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
	Rec_init->bit_count = 0;			// 0
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
	Rec_init->state = 0;				// 0
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	Rec_init->start_state = 0;			// 0
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	Rec_init->timeout_counter = 0;		// 0
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000956:	f000 fbfd 	bl	8001154 <HAL_Init>

	/* USER CODE BEGIN Init */
	__HAL_RCC_TIM1_CLK_ENABLE();	// does not work without it
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <main+0x8c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a1e      	ldr	r2, [pc, #120]	@ (80009dc <main+0x8c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <main+0x8c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
	TIM1->CR1 = TIM_CR1_CEN;	// does not work without it
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <main+0x90>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

	init_IR_receiver(&Receiver1);
 800097c:	4819      	ldr	r0, [pc, #100]	@ (80009e4 <main+0x94>)
 800097e:	f7ff ffbf 	bl	8000900 <init_IR_receiver>
	init_IR_receiver(&Receiver2);
 8000982:	4819      	ldr	r0, [pc, #100]	@ (80009e8 <main+0x98>)
 8000984:	f7ff ffbc 	bl	8000900 <init_IR_receiver>
	init_IR_receiver(&Receiver3);
 8000988:	4818      	ldr	r0, [pc, #96]	@ (80009ec <main+0x9c>)
 800098a:	f7ff ffb9 	bl	8000900 <init_IR_receiver>
	init_IR_receiver(&Receiver4);
 800098e:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <main+0xa0>)
 8000990:	f7ff ffb6 	bl	8000900 <init_IR_receiver>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000994:	f000 f832 	bl	80009fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000998:	f000 f9f8 	bl	8000d8c <MX_GPIO_Init>
	MX_TIM1_Init();
 800099c:	f000 f88c 	bl	8000ab8 <MX_TIM1_Init>
	MX_TIM5_Init();
 80009a0:	f000 f9a6 	bl	8000cf0 <MX_TIM5_Init>
	MX_TIM3_Init();
 80009a4:	f000 f8d8 	bl	8000b58 <MX_TIM3_Init>
	MX_TIM4_Init();
 80009a8:	f000 f954 	bl	8000c54 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)// error handler for PDLC PWM
 80009ac:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <main+0xa4>)
 80009ae:	f001 fb65 	bl	800207c <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <main+0x6c>
			{
		/* Starting Error */
		Error_Handler();
 80009b8:	f000 fa6c 	bl	8000e94 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009bc:	2108      	movs	r1, #8
 80009be:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <main+0xa4>)
 80009c0:	f001 fc18 	bl	80021f4 <HAL_TIM_PWM_Start>

	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) {
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <main+0xa8>)
 80009c6:	f001 fb59 	bl	800207c <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <main+0x86>
		/* Starting Error */
		Error_Handler();
 80009d0:	f000 fa60 	bl	8000e94 <Error_Handler>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	e7fd      	b.n	80009d6 <main+0x86>
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40010000 	.word	0x40010000
 80009e4:	2000014c 	.word	0x2000014c
 80009e8:	2000026c 	.word	0x2000026c
 80009ec:	2000038c 	.word	0x2000038c
 80009f0:	200004ac 	.word	0x200004ac
 80009f4:	20000070 	.word	0x20000070
 80009f8:	200000b8 	.word	0x200000b8

080009fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	@ 0x50
 8000a00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	@ 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fa9e 	bl	8002f4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <SystemClock_Config+0xb4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <SystemClock_Config+0xb4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <SystemClock_Config+0xb4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <SystemClock_Config+0xb8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab4 <SystemClock_Config+0xb8>)
 8000a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <SystemClock_Config+0xb8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	2310      	movs	r3, #16
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fe91 	bl	8001794 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x80>
		Error_Handler();
 8000a78:	f000 fa0c 	bl	8000e94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f8f4 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xaa>
		Error_Handler();
 8000aa2:	f000 f9f7 	bl	8000e94 <Error_Handler>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	@ 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b54 <MX_TIM1_Init+0x9c>)
 8000ad8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16 - 1;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000adc:	220f      	movs	r2, #15
 8000ade:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aec:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b02:	f001 fa6b 	bl	8001fdc <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000b0c:	f000 f9c2 	bl	8000e94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b1e:	f001 fdcb 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x74>
		Error_Handler();
 8000b28:	f000 f9b4 	bl	8000e94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b3a:	f002 f985 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b44:	f000 f9a6 	bl	8000e94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000028 	.word	0x20000028
 8000b54:	40010000 	.word	0x40010000

08000b58 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b88:	4b30      	ldr	r3, [pc, #192]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b8a:	4a31      	ldr	r2, [pc, #196]	@ (8000c50 <MX_TIM3_Init+0xf8>)
 8000b8c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16 - 1;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b90:	220f      	movs	r2, #15
 8000b92:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000 - 1;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ba0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000baa:	2280      	movs	r2, #128	@ 0x80
 8000bac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000bae:	4827      	ldr	r0, [pc, #156]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bb0:	f001 fa14 	bl	8001fdc <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM3_Init+0x66>
		Error_Handler();
 8000bba:	f000 f96b 	bl	8000e94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000bc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4820      	ldr	r0, [pc, #128]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bcc:	f001 fd74 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x82>
		Error_Handler();
 8000bd6:	f000 f95d 	bl	8000e94 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000bda:	481c      	ldr	r0, [pc, #112]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bdc:	f001 fab0 	bl	8002140 <HAL_TIM_PWM_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x92>
		Error_Handler();
 8000be6:	f000 f955 	bl	8000e94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4814      	ldr	r0, [pc, #80]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bfa:	f002 f925 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000c04:	f000 f946 	bl	8000e94 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	2360      	movs	r3, #96	@ 0x60
 8000c0a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c20:	f001 fc88 	bl	8002534 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000c2a:	f000 f933 	bl	8000e94 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0208 	bic.w	r2, r2, #8
 8000c3c:	61da      	str	r2, [r3, #28]
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c40:	f000 f9c0 	bl	8000fc4 <HAL_TIM_MspPostInit>

}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000070 	.word	0x20000070
 8000c50:	40000400 	.word	0x40000400

08000c54 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c72:	4a1e      	ldr	r2, [pc, #120]	@ (8000cec <MX_TIM4_Init+0x98>)
 8000c74:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c84:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c88:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000c98:	f001 f9a0 	bl	8001fdc <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM4_Init+0x52>
		Error_Handler();
 8000ca2:	f000 f8f7 	bl	8000e94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000cb4:	f001 fd00 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8000cbe:	f000 f8e9 	bl	8000e94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_TIM4_Init+0x94>)
 8000cd0:	f002 f8ba 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000cda:	f000 f8db 	bl	8000e94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000b8 	.word	0x200000b8
 8000cec:	40000800 	.word	0x40000800

08000cf0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <MX_TIM5_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000d32:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d34:	f001 f952 	bl	8001fdc <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM5_Init+0x52>
		Error_Handler();
 8000d3e:	f000 f8a9 	bl	8000e94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d50:	f001 fcb2 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM5_Init+0x6e>
		Error_Handler();
 8000d5a:	f000 f89b 	bl	8000e94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <MX_TIM5_Init+0x94>)
 8000d6c:	f002 f86c 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000d76:	f000 f88d 	bl	8000e94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000100 	.word	0x20000100
 8000d88:	40000c00 	.word	0x40000c00

08000d8c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PA8 PA9 PA10 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8000dda:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000dde:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000de0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000de4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <MX_GPIO_Init+0x98>)
 8000df2:	f000 fb33 	bl	800145c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2017      	movs	r0, #23
 8000dfc:	f000 faf7 	bl	80013ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e00:	2017      	movs	r0, #23
 8000e02:	f000 fb10 	bl	8001426 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2028      	movs	r0, #40	@ 0x28
 8000e0c:	f000 faef 	bl	80013ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e10:	2028      	movs	r0, #40	@ 0x28
 8000e12:	f000 fb08 	bl	8001426 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e38:	d01b      	beq.n	8000e72 <HAL_GPIO_EXTI_Callback+0x4a>
 8000e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e3e:	dc1c      	bgt.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
 8000e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e44:	d011      	beq.n	8000e6a <HAL_GPIO_EXTI_Callback+0x42>
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4a:	dc16      	bgt.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
 8000e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_EXTI_Callback+0x32>
 8000e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e56:	d004      	beq.n	8000e62 <HAL_GPIO_EXTI_Callback+0x3a>
		break;
	case GPIO_PIN_11:	// case for pin 6 different for PCB
		IR_Receive_Handler(&Receiver4);	// function to handle the IR data
		break;
	}
}
 8000e58:	e00f      	b.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver1);	// function to handle the IR data
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e5c:	f7ff fbbe 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e60:	e00b      	b.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver2);	// function to handle the IR data
 8000e62:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e64:	f7ff fbba 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e68:	e007      	b.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver3);	// function to handle the IR data
 8000e6a:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x64>)
 8000e6c:	f7ff fbb6 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_EXTI_Callback+0x52>
		IR_Receive_Handler(&Receiver4);	// function to handle the IR data
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e74:	f7ff fbb2 	bl	80005dc <IR_Receive_Handler>
		break;
 8000e78:	bf00      	nop
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000014c 	.word	0x2000014c
 8000e88:	2000026c 	.word	0x2000026c
 8000e8c:	2000038c 	.word	0x2000038c
 8000e90:	200004ac 	.word	0x200004ac

08000e94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <Error_Handler+0x8>

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10e      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f1e:	e042      	b.n	8000fa6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a24      	ldr	r2, [pc, #144]	@ (8000fb8 <HAL_TIM_Base_MspInit+0xc8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10e      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a20      	ldr	r2, [pc, #128]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
}
 8000f46:	e02e      	b.n	8000fa6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <HAL_TIM_Base_MspInit+0xcc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d116      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201e      	movs	r0, #30
 8000f74:	f000 fa3b 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f78:	201e      	movs	r0, #30
 8000f7a:	f000 fa54 	bl	8001426 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	e012      	b.n	8000fa6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10d      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40000800 	.word	0x40000800
 8000fc0:	40000c00 	.word	0x40000c00

08000fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	@ (800102c <HAL_TIM_MspPostInit+0x68>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d11d      	bne.n	8001022 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <HAL_TIM_MspPostInit+0x70>)
 800101e:	f000 fa1d 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40000400 	.word	0x40000400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <NMI_Handler+0x4>

08001040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <UsageFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108e:	f000 f8b3 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}

08001096 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800109a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800109e:	f000 fb61 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80010a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a6:	f000 fb5d 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <TIM4_IRQHandler+0x10>)
 80010b6:	f001 f94d 	bl	8002354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000b8 	.word	0x200000b8

080010c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80010cc:	f000 fb4a 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80010d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80010d4:	f000 fb46 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001104:	f7ff ffea 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f001 ff15 	bl	8002f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fc0d 	bl	8000950 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001144:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 8001148:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800114c:	200005d0 	.word	0x200005d0

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f92b 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fe8a 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f943 	bl	8001442 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f90b 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	200005cc 	.word	0x200005cc

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200005cc 	.word	0x200005cc

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e159      	b.n	800172c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 8148 	bne.w	8001726 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d005      	beq.n	80014ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d130      	bne.n	8001510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 0201 	and.w	r2, r3, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d017      	beq.n	800154c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0203 	and.w	r2, r3, #3
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a2 	beq.w	8001726 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b57      	ldr	r3, [pc, #348]	@ (8001744 <HAL_GPIO_Init+0x2e8>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a56      	ldr	r2, [pc, #344]	@ (8001744 <HAL_GPIO_Init+0x2e8>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b54      	ldr	r3, [pc, #336]	@ (8001744 <HAL_GPIO_Init+0x2e8>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fe:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_GPIO_Init+0x2ec>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a49      	ldr	r2, [pc, #292]	@ (800174c <HAL_GPIO_Init+0x2f0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x202>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	@ (8001750 <HAL_GPIO_Init+0x2f4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x1fe>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a47      	ldr	r2, [pc, #284]	@ (8001754 <HAL_GPIO_Init+0x2f8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x1fa>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a46      	ldr	r2, [pc, #280]	@ (8001758 <HAL_GPIO_Init+0x2fc>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x1f6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <HAL_GPIO_Init+0x300>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x1f2>
 800164a:	2304      	movs	r3, #4
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x204>
 800164e:	2307      	movs	r3, #7
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x204>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x204>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x204>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x204>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	@ (8001748 <HAL_GPIO_Init+0x2ec>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <HAL_GPIO_Init+0x304>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a24      	ldr	r2, [pc, #144]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <HAL_GPIO_Init+0x304>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001720:	4a0f      	ldr	r2, [pc, #60]	@ (8001760 <HAL_GPIO_Init+0x304>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f aea2 	bls.w	8001478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021000 	.word	0x40021000
 8001760:	40013c00 	.word	0x40013c00

08001764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb50 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e267      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d075      	beq.n	800189e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b2:	4b88      	ldr	r3, [pc, #544]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b85      	ldr	r3, [pc, #532]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b82      	ldr	r3, [pc, #520]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b7e      	ldr	r3, [pc, #504]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e242      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x74>
 80017fa:	4b76      	ldr	r3, [pc, #472]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a75      	ldr	r2, [pc, #468]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b70      	ldr	r3, [pc, #448]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6f      	ldr	r2, [pc, #444]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b6d      	ldr	r3, [pc, #436]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6c      	ldr	r2, [pc, #432]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 800182c:	4b69      	ldr	r3, [pc, #420]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a68      	ldr	r2, [pc, #416]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b66      	ldr	r3, [pc, #408]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a65      	ldr	r2, [pc, #404]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fce8 	bl	8001220 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fce4 	bl	8001220 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	@ 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e207      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b5b      	ldr	r3, [pc, #364]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xc0>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fcd4 	bl	8001220 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fcd0 	bl	8001220 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1f3      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0xe8>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018aa:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1c7      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b3b      	ldr	r3, [pc, #236]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4937      	ldr	r1, [pc, #220]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fc89 	bl	8001220 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fc85 	bl	8001220 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1a8      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fc68 	bl	8001220 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fc64 	bl	8001220 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e187      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d036      	beq.n	80019ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_RCC_OscConfig+0x248>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fc48 	bl	8001220 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fc44 	bl	8001220 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e167      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_RCC_OscConfig+0x240>)
 80019a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x200>
 80019b2:	e01b      	b.n	80019ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_OscConfig+0x248>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fc31 	bl	8001220 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e00e      	b.n	80019e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fc2d 	bl	8001220 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d907      	bls.n	80019e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e150      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
 80019dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b88      	ldr	r3, [pc, #544]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ea      	bne.n	80019c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8097 	beq.w	8001b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b81      	ldr	r3, [pc, #516]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a7c      	ldr	r2, [pc, #496]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b74      	ldr	r3, [pc, #464]	@ (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a73      	ldr	r2, [pc, #460]	@ (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbed 	bl	8001220 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fbe9 	bl	8001220 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e10c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2ea>
 8001a70:	4b64      	ldr	r3, [pc, #400]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a63      	ldr	r2, [pc, #396]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x30c>
 8001a86:	4b5f      	ldr	r3, [pc, #380]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a92:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	4a5b      	ldr	r2, [pc, #364]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001aa0:	4b58      	ldr	r3, [pc, #352]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	4a57      	ldr	r2, [pc, #348]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aac:	4b55      	ldr	r3, [pc, #340]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a54      	ldr	r2, [pc, #336]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fbae 	bl	8001220 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fbaa 	bl	8001220 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0cb      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	4b49      	ldr	r3, [pc, #292]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ee      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fb98 	bl	8001220 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff fb94 	bl	8001220 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0b5      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	4a38      	ldr	r2, [pc, #224]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a1 	beq.w	8001c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d05c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d141      	bne.n	8001bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb68 	bl	8001220 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fb64 	bl	8001220 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e087      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	491b      	ldr	r1, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb3d 	bl	8001220 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb39 	bl	8001220 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e05c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x416>
 8001bc8:	e054      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb26 	bl	8001220 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fb22 	bl	8001220 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e045      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
 8001bf6:	e03d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e038      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d121      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cc      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d90c      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e067      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4934      	ldr	r1, [pc, #208]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fa54 	bl	8001220 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7ff fa50 	bl	8001220 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20c      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	@ (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f9b4 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08002fbc 	.word	0x08002fbc
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b090      	sub	sp, #64	@ 0x40
 8001e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e60:	2300      	movs	r3, #0
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e68:	4b59      	ldr	r3, [pc, #356]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	f200 80a1 	bhi.w	8001fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x34>
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e82:	e09b      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b53      	ldr	r3, [pc, #332]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e86:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001e88:	e09b      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8a:	4b53      	ldr	r3, [pc, #332]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e8e:	e098      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d028      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	2200      	movs	r2, #0
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ebc:	fb03 f201 	mul.w	r2, r3, r1
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a43      	ldr	r2, [pc, #268]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eca:	fba0 1202 	umull	r1, r2, r0, r2
 8001ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ed6:	4413      	add	r3, r2
 8001ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001edc:	2200      	movs	r2, #0
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	61fa      	str	r2, [r7, #28]
 8001ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eea:	f7fe f975 	bl	80001d8 <__aeabi_uldivmod>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef6:	e053      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4b35      	ldr	r3, [pc, #212]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	2200      	movs	r2, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	617a      	str	r2, [r7, #20]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f0a:	f04f 0b00 	mov.w	fp, #0
 8001f0e:	4652      	mov	r2, sl
 8001f10:	465b      	mov	r3, fp
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ebb2 080a 	subs.w	r8, r2, sl
 8001f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f42:	ebb2 0408 	subs.w	r4, r2, r8
 8001f46:	eb63 0509 	sbc.w	r5, r3, r9
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	00eb      	lsls	r3, r5, #3
 8001f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f58:	00e2      	lsls	r2, r4, #3
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	eb14 030a 	adds.w	r3, r4, sl
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	eb45 030b 	adc.w	r3, r5, fp
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f76:	4629      	mov	r1, r5
 8001f78:	028b      	lsls	r3, r1, #10
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f80:	4621      	mov	r1, r4
 8001f82:	028a      	lsls	r2, r1, #10
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe f920 	bl	80001d8 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3740      	adds	r7, #64	@ 0x40
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	017d7840 	.word	0x017d7840

08001fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e041      	b.n	8002072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe ff74 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3304      	adds	r3, #4
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f000 fc3c 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e044      	b.n	800211e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <HAL_TIM_Base_Start_IT+0xb0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x6c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020be:	d013      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x6c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_TIM_Base_Start_IT+0xb4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00e      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x6c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_TIM_Base_Start_IT+0xb8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x6c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_TIM_Base_Start_IT+0xbc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x6c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	@ (800213c <HAL_TIM_Base_Start_IT+0xc0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d111      	bne.n	800210c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d010      	beq.n	800211c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	e007      	b.n	800211c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40014000 	.word	0x40014000

08002140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e041      	b.n	80021d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f839 	bl	80021de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 fb8a 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_TIM_PWM_Start+0x24>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e022      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d109      	bne.n	8002232 <HAL_TIM_PWM_Start+0x3e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e015      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d109      	bne.n	800224c <HAL_TIM_PWM_Start+0x58>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e008      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e068      	b.n	8002338 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_TIM_PWM_Start+0x82>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002274:	e013      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d104      	bne.n	8002286 <HAL_TIM_PWM_Start+0x92>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002284:	e00b      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_TIM_PWM_Start+0xa2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002294:	e003      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fda8 	bl	8002dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_TIM_PWM_Start+0x14c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d107      	bne.n	80022c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_TIM_PWM_Start+0x14c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_TIM_PWM_Start+0x10e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d8:	d013      	beq.n	8002302 <HAL_TIM_PWM_Start+0x10e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_TIM_PWM_Start+0x150>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_TIM_PWM_Start+0x10e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_TIM_PWM_Start+0x154>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_PWM_Start+0x10e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_TIM_PWM_Start+0x158>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_PWM_Start+0x10e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <HAL_TIM_PWM_Start+0x15c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40010000 	.word	0x40010000
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800
 800234c:	40000c00 	.word	0x40000c00
 8002350:	40014000 	.word	0x40014000

08002354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d020      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01b      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0202 	mvn.w	r2, #2
 8002388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa5b 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa4d 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fa5e 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d020      	beq.n	8002404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0204 	mvn.w	r2, #4
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa35 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa27 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa38 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d020      	beq.n	8002450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa0f 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa01 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa12 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d020      	beq.n	800249c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0210 	mvn.w	r2, #16
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2208      	movs	r2, #8
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9e9 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f9db 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9ec 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0201 	mvn.w	r2, #1
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f820 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fd2a 	bl	8002f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9bd 	bl	8002882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0220 	mvn.w	r2, #32
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fcfc 	bl	8002f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ae      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	f200 809f 	bhi.w	80026a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800259d 	.word	0x0800259d
 800256c:	080026a1 	.word	0x080026a1
 8002570:	080026a1 	.word	0x080026a1
 8002574:	080026a1 	.word	0x080026a1
 8002578:	080025dd 	.word	0x080025dd
 800257c:	080026a1 	.word	0x080026a1
 8002580:	080026a1 	.word	0x080026a1
 8002584:	080026a1 	.word	0x080026a1
 8002588:	0800261f 	.word	0x0800261f
 800258c:	080026a1 	.word	0x080026a1
 8002590:	080026a1 	.word	0x080026a1
 8002594:	080026a1 	.word	0x080026a1
 8002598:	0800265f 	.word	0x0800265f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fa04 	bl	80029b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	619a      	str	r2, [r3, #24]
      break;
 80025da:	e064      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fa4a 	bl	8002a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
      break;
 800261c:	e043      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa95 	bl	8002b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0208 	orr.w	r2, r2, #8
 8002638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	61da      	str	r2, [r3, #28]
      break;
 800265c:	e023      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fadf 	bl	8002c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	75fb      	strb	r3, [r7, #23]
      break;
 80026a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_ConfigClockSource+0x1c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0b4      	b.n	800283e <HAL_TIM_ConfigClockSource+0x186>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270c:	d03e      	beq.n	800278c <HAL_TIM_ConfigClockSource+0xd4>
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002712:	f200 8087 	bhi.w	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271a:	f000 8086 	beq.w	800282a <HAL_TIM_ConfigClockSource+0x172>
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002722:	d87f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b70      	cmp	r3, #112	@ 0x70
 8002726:	d01a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0xa6>
 8002728:	2b70      	cmp	r3, #112	@ 0x70
 800272a:	d87b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b60      	cmp	r3, #96	@ 0x60
 800272e:	d050      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002730:	2b60      	cmp	r3, #96	@ 0x60
 8002732:	d877      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b50      	cmp	r3, #80	@ 0x50
 8002736:	d03c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002738:	2b50      	cmp	r3, #80	@ 0x50
 800273a:	d873      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d058      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d86f      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b30      	cmp	r3, #48	@ 0x30
 8002746:	d064      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b30      	cmp	r3, #48	@ 0x30
 800274a:	d86b      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d060      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d867      	bhi.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05c      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	2b10      	cmp	r3, #16
 800275a:	d05a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	e062      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	f000 fb25 	bl	8002dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	609a      	str	r2, [r3, #8]
      break;
 800278a:	e04f      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	f000 fb0e 	bl	8002dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ae:	609a      	str	r2, [r3, #8]
      break;
 80027b0:	e03c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 fa82 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2150      	movs	r1, #80	@ 0x50
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fadb 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e02c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 faa1 	bl	8002d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2160      	movs	r1, #96	@ 0x60
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 facb 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e01c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fe:	461a      	mov	r2, r3
 8002800:	f000 fa62 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2140      	movs	r1, #64	@ 0x40
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fabb 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002810:	e00c      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f000 fab2 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002822:	e003      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e000      	b.n	800282c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800282a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002994 <TIM_Base_SetConfig+0xfc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00f      	beq.n	80028d0 <TIM_Base_SetConfig+0x38>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a37      	ldr	r2, [pc, #220]	@ (8002998 <TIM_Base_SetConfig+0x100>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a36      	ldr	r2, [pc, #216]	@ (800299c <TIM_Base_SetConfig+0x104>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a35      	ldr	r2, [pc, #212]	@ (80029a0 <TIM_Base_SetConfig+0x108>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <TIM_Base_SetConfig+0xfc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01b      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d017      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <TIM_Base_SetConfig+0x100>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a27      	ldr	r2, [pc, #156]	@ (800299c <TIM_Base_SetConfig+0x104>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00f      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a26      	ldr	r2, [pc, #152]	@ (80029a0 <TIM_Base_SetConfig+0x108>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <TIM_Base_SetConfig+0x10c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <TIM_Base_SetConfig+0x110>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a23      	ldr	r2, [pc, #140]	@ (80029ac <TIM_Base_SetConfig+0x114>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0e      	ldr	r2, [pc, #56]	@ (8002994 <TIM_Base_SetConfig+0xfc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 0201 	bic.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
  }
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800

080029b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 0201 	bic.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 0302 	bic.w	r3, r3, #2
 80029f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <TIM_OC1_SetConfig+0xc8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10c      	bne.n	8002a26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0308 	bic.w	r3, r3, #8
 8002a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a13      	ldr	r2, [pc, #76]	@ (8002a78 <TIM_OC1_SetConfig+0xc8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40010000 	.word	0x40010000

08002a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f023 0210 	bic.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f023 0320 	bic.w	r3, r3, #32
 8002ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <TIM_OC2_SetConfig+0xd4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10d      	bne.n	8002af8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <TIM_OC2_SetConfig+0xd4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d113      	bne.n	8002b28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000

08002b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	@ (8002c24 <TIM_OC3_SetConfig+0xd0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10d      	bne.n	8002bce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <TIM_OC3_SetConfig+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d113      	bne.n	8002bfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	621a      	str	r2, [r3, #32]
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40010000 	.word	0x40010000

08002c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <TIM_OC4_SetConfig+0x9c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d109      	bne.n	8002c9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 030a 	bic.w	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 0210 	bic.w	r2, r3, #16
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	031b      	lsls	r3, r3, #12
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f043 0307 	orr.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2201      	movs	r2, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e050      	b.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d013      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	@ (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40014000 	.word	0x40014000

08002f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <memset>:
 8002f4c:	4402      	add	r2, r0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d100      	bne.n	8002f56 <memset+0xa>
 8002f54:	4770      	bx	lr
 8002f56:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5a:	e7f9      	b.n	8002f50 <memset+0x4>

08002f5c <__libc_init_array>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002f94 <__libc_init_array+0x38>)
 8002f60:	4c0d      	ldr	r4, [pc, #52]	@ (8002f98 <__libc_init_array+0x3c>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	2600      	movs	r6, #0
 8002f68:	42a6      	cmp	r6, r4
 8002f6a:	d109      	bne.n	8002f80 <__libc_init_array+0x24>
 8002f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f9c <__libc_init_array+0x40>)
 8002f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8002fa0 <__libc_init_array+0x44>)
 8002f70:	f000 f818 	bl	8002fa4 <_init>
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	2600      	movs	r6, #0
 8002f7a:	42a6      	cmp	r6, r4
 8002f7c:	d105      	bne.n	8002f8a <__libc_init_array+0x2e>
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f84:	4798      	blx	r3
 8002f86:	3601      	adds	r6, #1
 8002f88:	e7ee      	b.n	8002f68 <__libc_init_array+0xc>
 8002f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8e:	4798      	blx	r3
 8002f90:	3601      	adds	r6, #1
 8002f92:	e7f2      	b.n	8002f7a <__libc_init_array+0x1e>
 8002f94:	08002fd4 	.word	0x08002fd4
 8002f98:	08002fd4 	.word	0x08002fd4
 8002f9c:	08002fd4 	.word	0x08002fd4
 8002fa0:	08002fd8 	.word	0x08002fd8

08002fa4 <_init>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr

08002fb0 <_fini>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr
